var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeomOpt","category":"page"},{"location":"#GeomOpt","page":"Home","title":"GeomOpt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GeomOpt.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GeomOpt]","category":"page"},{"location":"#GeomOpt.DofManager","page":"Home","title":"GeomOpt.DofManager","text":"DofManager: \n\nConstructor:\n\nDofManager(sys; variablecell = false, r0 =..., free=..., clamp=..., mask=...)\n\nvariablecell determines whether the cell is fixed or allowed to change  during optimization \nr0 is a reference length-scale, default set to one (in the unit of sys),   this is used to non-dimensionalize the degrees of freedom. \n\nIn addition set at most one of the kwargs:\n\nno kwarg: all atoms are free\nfree : list of free atom indices (not dof indices)\nclamp : list of clamped atom indices (not dof indices)\nmask : 3 x N Bool array to specify individual coordinates to be clamped\n\nMeaning of dofs\n\nOn call to the constructor, DofManager stores positions and cell X0, C0, dofs are understood relative to this initial configuration. get_dofs(sys, dm::DofManager) returns a vector that represents the non-dimensional displacement and a deformation matrix (U, F). The new configuration extracted from a dof vector  is understood as \n\nThe new cell: C = F * C0 \nThe new positions: ùê´[i] = F * (X0[i] + U[i] * r0)\n\nOne aspect of this definition is that clamped atom positions still change via the deformation F. This is natural in the context of optimizing the  cell shape. \n\n\n\n\n\n","category":"type"},{"location":"#GeomOpt.analyze_mask-NTuple{4, Any}","page":"Home","title":"GeomOpt.analyze_mask","text":"analyze_mask : helper function to generate list of dof indices from lists of atom indices indicating free and clamped atoms\n\n\n\n\n\n","category":"method"},{"location":"#GeomOpt.minimise-Tuple{Any, Any}","page":"Home","title":"GeomOpt.minimise","text":"minimise!(sys, calc; kwargs...): minimize potential energy\n\nKeyword arguments:\n\nprecond = I : preconditioner; more below\nfrc_tol = 1e-6u\"eV/√Ö\" : force tolerance (max-norm)\n`vir_tol = 1e-6u\"eV\" : virial / Nat tolerance \nE_tol = 0.0u\"eV\" : total energy tolerance`\nOptimiser = :auto, :auto should always work\nverbose = 1: 0 : no output, 1 : final, 2 : iteration and final\nstore_trace = false : store history of energy and norm of forces\nextended_trace = false: also store full history of postions and forces\nmaxstep = Inf: maximum step size, useful if initial gradient is very large\ncallback = nothing: callback function to pass to optimize(), e.g. to use alternate convergence criteria\nfrc_call_limit = 1000 : set a limit on the number of force calls before giving up \n\nPreconditioner\n\nprecond may be a valid preconditioner, e.g., I or Exp(at), or one of the following symbols\n\n:auto : the code will make the best choice it can with the available  information\n:exp : will use Exp(at)\n:id : will use I\n\n\n\n\n\n","category":"method"}]
}
